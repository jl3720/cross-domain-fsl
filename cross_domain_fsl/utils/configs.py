CLIP_DIM_MAPPING = {"ViT-B/32": 512, "ViT-B/16": 512, "ViT-L/14": 768, "RN50": 1024}

EUROSAT_CLASSES = [
    "AnnualCrop",
    "Forest",
    "HerbaceousVegetation",
    "Highway",
    "Industrial",
    "Pasture",
    "PermanentCrop",
    "Residential",
    "River",
    "SeaLake",
]

EUROSAT_PROMPTS = (
    [  # TODO: Engineer to allow for "A S* style <satellite photo of <Annual Crop>>"
        "Annual Crop",
        "Forest",
        "Herbaceous Vegetation",
        "Highway",
        "Industrial",
        "Pasture",
        "Permanent Crop",
        "Residential",
        "River",
        "Sea Lake",
    ]
)

CROPDISEASE_CLASSES = [
    "Apple___Apple_scab",
    "Apple___Black_rot",
    "Apple___Cedar_apple_rust",
    "Apple___healthy",
    "Blueberry___healthy",
    "Cherry_(including_sour)___Powdery_mildew",
    "Cherry_(including_sour)___healthy",
    "Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot",
    "Corn_(maize)___Common_rust_",
    "Corn_(maize)___Northern_Leaf_Blight",
    "Corn_(maize)___healthy",
    "Grape___Black_rot",
    "Grape___Esca_(Black_Measles)",
    "Grape___Leaf_blight_(Isariopsis_Leaf_Spot)",
    "Grape___healthy",
    "Orange___Haunglongbing_(Citrus_greening)",
    "Peach___Bacterial_spot",
    "Peach___healthy",
    "Pepper,_bell___Bacterial_spot",
    "Pepper,_bell___healthy",
    "Potato___Early_blight",
    "Potato___Late_blight",
    "Potato___healthy",
    "Raspberry___healthy",
    "Soybean___healthy",
    "Squash___Powdery_mildew",
    "Strawberry___Leaf_scorch",
    "Strawberry___healthy",
    "Tomato___Bacterial_spot",
    "Tomato___Early_blight",
    "Tomato___Late_blight",
    "Tomato___Leaf_Mold",
    "Tomato___Septoria_leaf_spot",
    "Tomato___Spider_mites Two-spotted_spider_mite",
    "Tomato___Target_Spot",
    "Tomato___Tomato_Yellow_Leaf_Curl_Virus",
    "Tomato___Tomato_mosaic_virus",
    "Tomato___healthy",
]
CROPDISEASE_PROMPTS = [
    "Apple with Apple Scab",
    "Apple with Black Rot",
    "Apple with Cedar Apple Rust",
    "Healthy Apple",
    "Healthy Blueberry",
    "Cherry with Powdery Mildew",
    "Healthy Cherry",
    "Corn with Cercospora Leaf Spot / Gray Leaf Spot",
    "Corn with Common Rust",
    "Corn with Northern Leaf Blight",
    "Healthy Corn",
    "Grape with Black Rot",
    "Grape with Esca (Black Measles)",
    "Grape with Leaf Blight (Isariopsis Leaf Spot)",
    "Healthy Grape",
    "Orange with Huanglongbing (Citrus Greening)",
    "Peach with Bacterial Spot",
    "Healthy Peach",
    "Pepper with Bacterial Spot",
    "Healthy Pepper",
    "Potato with Early Blight",
    "Potato with Late Blight",
    "Healthy Potato",
    "Healthy Raspberry",
    "Healthy Soybean",
    "Squash with Powdery Mildew",
    "Strawberry with Leaf Scorch",
    "Healthy Strawberry",
    "Tomato with Bacterial Spot",
    "Tomato with Early Blight",
    "Tomato with Late Blight",
    "Tomato with Leaf Mold",
    "Tomato with Septoria Leaf Spot",
    "Tomato with Spider Mites (Two-Spotted Spider Mite)",
    "Tomato with Target Spot",
    "Tomato with Tomato Yellow Leaf Curl Virus",
    "Tomato with Tomato Mosaic Virus",
    "Healthy Tomato",
]

ISIC_CLASSES = ["MEL", "NV", "BCC", "AKIEC", "BKL", "DF", "VASC"]
ISIC_PROMPTS = [  # "... an image of skin with <Melanoma>"
    "Melanoma",
    "Melanocytic Nevi",
    "Basal Cell Carcinoma",
    "Actinic Keratosis",
    "Benign Keratosis",
    "Dermatofibroma",
    "Vascular Lesion",
]

CHESTX_CLASSES = [
    "Atelectasis",
    "Cardiomegaly",
    "Effusion",
    "Infiltration",
    "Mass",
    "Nodule",
    "Pneumonia",
    "Pneumothorax",
]
CHESTX_PROMPTS = [
    "Atelectasis",  # "... an X-ray chest scan of lungs with <>"
    "Cardiomegaly",
    "Effusion",
    "Infiltration",
    "a Mass",
    "a Nodule",
    "Pneumonia",
    "Pneumothorax",
]

CLASS_NAMES_MAPPING = {
    "EuroSAT": dict(zip(EUROSAT_CLASSES, EUROSAT_PROMPTS)),
    "CropDisease": dict(zip(CROPDISEASE_CLASSES, CROPDISEASE_PROMPTS)),
    "ISIC": dict(zip(ISIC_CLASSES, ISIC_PROMPTS)),
    "CheX": dict(zip(CHESTX_CLASSES, CHESTX_PROMPTS)),
}

DG_CLASS_NAMES_MAPPING = {
    "PACS": ["dog", "elephant", "giraffe", "guitar", "horse", "house", "person"],
    "OfficeHome": [
        "Drill",
        "Exit_Sign",
        "Bottle",
        "Glasses",
        "Computer",
        "File_Cabinet",
        "Shelf",
        "Toys",
        "Sink",
        "Laptop",
        "Kettle",
        "Folder",
        "Keyboard",
        "Flipflops",
        "Pencil",
        "Bed",
        "Hammer",
        "ToothBrush",
        "Couch",
        "Bike",
        "Postit_Notes",
        "Mug",
        "Webcam",
        "Desk_Lamp",
        "Telephone",
        "Helmet",
        "Mouse",
        "Pen",
        "Monitor",
        "Mop",
        "Sneakers",
        "Notebook",
        "Backpack",
        "Alarm_Clock",
        "Push_Pin",
        "Paper_Clip",
        "Batteries",
        "Radio",
        "Fan",
        "Ruler",
        "Pan",
        "Screwdriver",
        "Trash_Can",
        "Printer",
        "Speaker",
        "Eraser",
        "Bucket",
        "Chair",
        "Calendar",
        "Calculator",
        "Flowers",
        "Lamp_Shade",
        "Spoon",
        "Candles",
        "Clipboards",
        "Scissors",
        "TV",
        "Curtains",
        "Fork",
        "Soda",
        "Table",
        "Knives",
        "Oven",
        "Refrigerator",
        "Marker",
    ],
    # "VLCS": ["car", "person", "dog", "bird", "chair"],
    # must be in same order as in image_list
    "VLCS": ["bird", "car", "chair", "dog", "person"],
    "DomainNet": [
        "aircraft_carrier",
        "airplane",
        "alarm_clock",
        "ambulance",
        "angel",
        "animal_migration",
        "ant",
        "anvil",
        "apple",
        "arm",
        "asparagus",
        "axe",
        "backpack",
        "banana",
        "bandage",
        "barn",
        "baseball",
        "baseball_bat",
        "basket",
        "basketball",
        "bat",
        "bathtub",
        "beach",
        "bear",
        "beard",
        "bed",
        "bee",
        "belt",
        "bench",
        "bicycle",
        "binoculars",
        "bird",
        "birthday_cake",
        "blackberry",
        "blueberry",
        "book",
        "boomerang",
        "bottlecap",
        "bowtie",
        "bracelet",
        "brain",
        "bread",
        "bridge",
        "broccoli",
        "broom",
        "bucket",
        "bulldozer",
        "bus",
        "bush",
        "butterfly",
        "cactus",
        "cake",
        "calculator",
        "calendar",
        "camel",
        "camera",
        "camouflage",
        "campfire",
        "candle",
        "cannon",
        "canoe",
        "car",
        "carrot",
        "castle",
        "cat",
        "ceiling_fan",
        "cello",
        "cell_phone",
        "chair",
        "chandelier",
        "church",
        "circle",
        "clarinet",
        "clock",
        "cloud",
        "coffee_cup",
        "compass",
        "computer",
        "cookie",
        "cooler",
        "couch",
        "cow",
        "crab",
        "crayon",
        "crocodile",
        "crown",
        "cruise_ship",
        "cup",
        "diamond",
        "dishwasher",
        "diving_board",
        "dog",
        "dolphin",
        "donut",
        "door",
        "dragon",
        "dresser",
        "drill",
        "drums",
        "duck",
        "dumbbell",
        "ear",
        "elbow",
        "elephant",
        "envelope",
        "eraser",
        "eye",
        "eyeglasses",
        "face",
        "fan",
        "feather",
        "fence",
        "finger",
        "fire_hydrant",
        "fireplace",
        "firetruck",
        "fish",
        "flamingo",
        "flashlight",
        "flip_flops",
        "floor_lamp",
        "flower",
        "flying_saucer",
        "foot",
        "fork",
        "frog",
        "frying_pan",
        "garden",
        "garden_hose",
        "giraffe",
        "goatee",
        "golf_club",
        "grapes",
        "grass",
        "guitar",
        "hamburger",
        "hammer",
        "hand",
        "harp",
        "hat",
        "headphones",
        "hedgehog",
        "helicopter",
        "helmet",
        "hexagon",
        "hockey_puck",
        "hockey_stick",
        "horse",
        "hospital",
        "hot_air_balloon",
        "hot_dog",
        "hot_tub",
        "hourglass",
        "house",
        "house_plant",
        "hurricane",
        "ice_cream",
        "jacket",
        "jail",
        "kangaroo",
        "key",
        "keyboard",
        "knee",
        "knife",
        "ladder",
        "lantern",
        "laptop",
        "leaf",
        "leg",
        "light_bulb",
        "lighter",
        "lighthouse",
        "lightning",
        "line",
        "lion",
        "lipstick",
        "lobster",
        "lollipop",
        "mailbox",
        "map",
        "marker",
        "matches",
        "megaphone",
        "mermaid",
        "microphone",
        "microwave",
        "monkey",
        "moon",
        "mosquito",
        "motorbike",
        "mountain",
        "mouse",
        "moustache",
        "mouth",
        "mug",
        "mushroom",
        "nail",
        "necklace",
        "nose",
        "ocean",
        "octagon",
        "octopus",
        "onion",
        "oven",
        "owl",
        "paintbrush",
        "paint_can",
        "palm_tree",
        "panda",
        "pants",
        "paper_clip",
        "parachute",
        "parrot",
        "passport",
        "peanut",
        "pear",
        "peas",
        "pencil",
        "penguin",
        "piano",
        "pickup_truck",
        "picture_frame",
        "pig",
        "pillow",
        "pineapple",
        "pizza",
        "pliers",
        "police_car",
        "pond",
        "pool",
        "popsicle",
        "postcard",
        "potato",
        "power_outlet",
        "purse",
        "rabbit",
        "raccoon",
        "radio",
        "rain",
        "rainbow",
        "rake",
        "remote_control",
        "rhinoceros",
        "rifle",
        "river",
        "roller_coaster",
        "rollerskates",
        "sailboat",
        "sandwich",
        "saw",
        "saxophone",
        "school_bus",
        "scissors",
        "scorpion",
        "screwdriver",
        "sea_turtle",
        "see_saw",
        "shark",
        "sheep",
        "shoe",
        "shorts",
        "shovel",
        "sink",
        "skateboard",
        "skull",
        "skyscraper",
        "sleeping_bag",
        "smiley_face",
        "snail",
        "snake",
        "snorkel",
        "snowflake",
        "snowman",
        "soccer_ball",
        "sock",
        "speedboat",
        "spider",
        "spoon",
        "spreadsheet",
        "square",
        "squiggle",
        "squirrel",
        "stairs",
        "star",
        "steak",
        "stereo",
        "stethoscope",
        "stitches",
        "stop_sign",
        "stove",
        "strawberry",
        "streetlight",
        "string_bean",
        "submarine",
        "suitcase",
        "sun",
        "swan",
        "sweater",
        "swing_set",
        "sword",
        "syringe",
        "table",
        "teapot",
        "teddy-bear",
        "telephone",
        "television",
        "tennis_racquet",
        "tent",
        "The_Eiffel_Tower",
        "The_Great_Wall_of_China",
        "The_Mona_Lisa",
        "tiger",
        "toaster",
        "toe",
        "toilet",
        "tooth",
        "toothbrush",
        "toothpaste",
        "tornado",
        "tractor",
        "traffic_light",
        "train",
        "tree",
        "triangle",
        "trombone",
        "truck",
        "trumpet",
        "t-shirt",
        "umbrella",
        "underwear",
        "van",
        "vase",
        "violin",
        "washing_machine",
        "watermelon",
        "waterslide",
        "whale",
        "wheel",
        "windmill",
        "wine_bottle",
        "wine_glass",
        "wristwatch",
        "yoga",
        "zebra",
        "zigzag",
    ],
}
# N.B. Domain integer encoding is defined in `train_domain_classifier.generate_prompts()`
# Loops through the list stored in values below.

# Use full domain word to create prompts
DG_DOMAINS_FULL = {
    "PACS": ["photo", "art", "cartoon", "sketch"],
    "OfficeHome": ["art", "clipart", "product", "real world"],
    # "VLCS": ["clipart", "infograph", "sketch", "painting"],
    "VLCS": ["VOCS2007", "LabelMe", "Caltech101", "SUN09"],
    "DomainNet": ["clipart", "infographic", "painting", "quickdraw", "real", "sketch"],
    "All": [
        "photo",
        "art",
        "cartoon",
        "sketch",
        "art",
        "clipart",
        "product",
        "real world",
        "clipart",
        "infograph",
        "sketch",
        "painting",
        "clipart",
        "infographic",
        "painting",
        "quickdraw",
        "real",
        "sketch",
    ],
}

# Abbreviations for domains needed for compatibility with tllib.vision.datasets
# DOMAINS_TO_ABBREV = {}
# for dataset, full_domains in DOMAINS_FULL.items():
#     DOMAINS_TO_ABBREV[dataset] = {full_domain: abbreviated_domain for full_domain, abbreviated_domain in zip(full_domains, DOMAINS[dataset])}
# print(DOMAINS_TO_ABBREV)
DG_DOMAINS_TO_ABBREV = {
    "PACS": {"photo": "P", "art": "A", "cartoon": "C", "sketch": "S"},
    "OfficeHome": {"art": "Ar", "clipart": "Cl", "product": "Pr", "real world": "Rw"},
    # "VLCS": {"clipart": "C", "infograph": "L", "sketch": "S", "painting": "V"},
    "VLCS": {"Caltech101": "C", "LabelMe": "L", "SUN09": "S", "VOCS2007": "V"},
    "DomainNet": {
        "clipart": "c",
        "infographic": "i",
        "painting": "p",
        "quickdraw": "q",
        "real": "r",
        "sketch": "s",
    },
    "All": {
        "photo": "P",
        "art": "A",
        "cartoon": "C",
        "sketch": "S",
        "art": "Ar",
        "clipart": "Cl",
        "product": "Pr",
        "real world": "Rw",
        "clipart": "C",
        "infograph": "L",
        "sketch": "S",
        "painting": "V",
        "clipart": "c",
        "infographic": "i",
        "painting": "p",
        "quickdraw": "q",
        "real": "r",
        "sketch": "s",
    },
}


def gen_domain_int_enc() -> dict:
    """
    Returns:
        domain_encodings: dict[str, dict[str, int]]
        i.e.:
        {'PACS': {'P': 0, 'A': 1, ...}, 'OfficeHome': {...}, ...}
        DOMAINS[<dataset>][<domain>]
    """
    domain_encodings = {}
    for dataset in DG_DOMAINS_FULL.keys():
        tmp_domains = {}
        for i, domain in enumerate(DG_DOMAINS_FULL[dataset]):
            tmp_domains[domain] = i  # integer encode domains in order

        domain_encodings[dataset] = tmp_domains

    return domain_encodings


DG_DOMAIN_ENCODINGS = gen_domain_int_enc()
# print(DOMAIN_ENCODINGS)
